/* ----------------------Preliminary Declarations Section--------------------*/

/* Import the class java_cup.runtime.*  */
package ex2.JCup;
import java_cup.runtime.*;
import ex2.JCup.ParserTokens.*;

/* Parser code to change the way the parser reports errors (include
   line and column INT of the error). */
parser code {:


    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line INT in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuilder error message
                   the line INT of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column INT in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuilder error message
                       the column INT of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column INT of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};



/* ------------Declaration of Terminals and Non Terminals Section----------- */
terminal           PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN;
terminal Integer   INT;
terminal Integer    ID;

non terminal E     E;
non terminal T     T;
non terminal F     F;

/* -------------Precedence and Associatively of Terminals Section----------- */

  precedence left PLUS, MINUS;
  precedence left TIMES, DIVIDE;

/* ----------------------------Grammar Section-------------------- */

/* The grammar for our parser.
E ::= E + T | E - T | T
T ::= T * F | T / F | F
F ::= (E) | INT | ID
*/

  E ::= E:l PLUS T:r  {: RESULT = new PlusE(l,r); :} | E:l MINUS T:r  {: RESULT = new MinusE(l,r); :} | T:t {: RESULT = new TE(t); :} ;
  T ::= T:l TIMES F:r {: RESULT = new MultiplyT(l,r); :} | T:l DIVIDE F:r {: RESULT = new DivideT(l,r); :} | F:f {: RESULT = new FT(f); :} ;
  F ::= LPAREN E:e RPAREN {: RESULT = new FBRACKET(e); :} | INT:i {: RESULT = new INT(i); :}  | ID:s {: RESULT = new ID(s); :} ;
